/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

 /*
 * ConsultasClientes.java
 *
 * Created on 15-abr-2013, 8:33:48
 */
package view;

import conexion.Conexion;
import java.sql.*;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import static mainGarage.Main.hc;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRExporter;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.engine.export.JRPdfExporter;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.view.JasperViewer;
import reportes.GenerarReporte;
import reportes.ReporteClientesMensual;
import reportes.ReporteIngresosClientes;

/**
 *
 * @author Administrador
 */
public class ConsultasRegistrosClientes extends javax.swing.JInternalFrame {

    public static Connection sql;
    public static Statement s;

    public ConsultasRegistrosClientes() {
        initComponents();
        txtdni.setEnabled(false);
        calendarfecha1.setEnabled(false);
        calendarfecha2.setEnabled(false);
        Cargarlistaclientes();
        System.out.println(fechaactual());
        
    }

    void Cargarlistaclientes() {
        DefaultTableModel modelo = new DefaultTableModel();
        String[] Titulos = {"CÓDIGO", "CÉDULA", "NOMBRES", "APELLIDOS", "PLACA", "FECHA", "ENTRADA", "SALIDA", "HORAS", "TOTAL"};
        modelo.setColumnIdentifiers(Titulos);
        this.tbclientes.setModel(modelo);

        Conexion j = new Conexion();
        j.conectar();
        sql = j.sql;
        try {
            String[] registros = new String[10];
            s = sql.createStatement();
            String ConsultaSQL = "SELECT cliente_mes.cod_barras, cliente_mes.ci,cliente_mes.nombre,cliente_mes.apellido,cliente_mes.placa,entradas.fecha,entradas.hora_llegada, entradas.hora_salida, pagos.horas,pagos.tota FROM pagos, cliente_mes, entradas WHERE entradas.fecha = '" + fechaactual() + "' AND entradas.estado ='Salida' AND entradas.ci = cliente_mes.ci AND pagos.id_entrada=entradas.id";
            ResultSet rs = s.executeQuery(ConsultaSQL);

            while (rs.next()) {
                registros[0] = rs.getString("cod_barras");
                registros[1] = rs.getString("ci");
                registros[2] = rs.getString("nombre");
                registros[3] = rs.getString("apellido");
                registros[4] = rs.getString("placa");
                registros[5] = rs.getString("fecha");
                registros[6] = rs.getString("hora_llegada");
                registros[7] = rs.getString("hora_salida");
                registros[8] = rs.getString("horas");
                registros[9] = rs.getString("tota");
                modelo.addRow(registros);

            }
            tbclientes.setModel(modelo);
            txtcant.setText("" + tbclientes.getRowCount());
            sumar();
        } catch (SQLException ex) {
            Logger.getLogger(ConsultasRegistrosClientes.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        rdfecha = new javax.swing.JRadioButton();
        rddni = new javax.swing.JRadioButton();
        rdtodo = new javax.swing.JRadioButton();
        txtdni = new javax.swing.JTextField();
        btnbuscar = new javax.swing.JButton();
        calendarFecha = new com.toedter.calendar.JDateChooser();
        intervalos = new javax.swing.JRadioButton();
        calendarfecha2 = new com.toedter.calendar.JDateChooser();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        calendarfecha1 = new com.toedter.calendar.JDateChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbclientes = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        txtcant = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        lbingresos = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("INGRESOS DE CLIENTES MENSUALES");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        buttonGroup1.add(rdfecha);
        rdfecha.setSelected(true);
        rdfecha.setText("Mostrar por fecha");
        rdfecha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdfechaActionPerformed(evt);
            }
        });

        buttonGroup1.add(rddni);
        rddni.setText("Buscar Clientes por CI");
        rddni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rddniActionPerformed(evt);
            }
        });

        buttonGroup1.add(rdtodo);
        rdtodo.setText("Mostrar ingresos de hoy");
        rdtodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdtodoActionPerformed(evt);
            }
        });

        txtdni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtdniActionPerformed(evt);
            }
        });

        btnbuscar.setText("BUSCAR");
        btnbuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnbuscarActionPerformed(evt);
            }
        });

        buttonGroup1.add(intervalos);
        intervalos.setText("Intervalo fechas");
        intervalos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                intervalosActionPerformed(evt);
            }
        });

        jLabel2.setText("inicio");

        jLabel3.setText("fin");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(rdtodo)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rddni)
                            .addComponent(rdfecha)
                            .addComponent(intervalos))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(calendarfecha2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(calendarfecha1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(calendarFecha, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtdni))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addGap(49, 49, 49)
                        .addComponent(btnbuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(46, 46, 46))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnbuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rdfecha)
                            .addComponent(calendarFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(intervalos)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel2)
                                .addComponent(calendarfecha2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(calendarfecha1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel3)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rddni)
                    .addComponent(txtdni, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rdtodo)
                .addContainerGap(38, Short.MAX_VALUE))
        );

        tbclientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tbclientes);

        jLabel1.setText("Cantidad de Registros");

        txtcant.setEnabled(false);

        jButton2.setText("Generar Reporte");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setText("Total ingresos");

        lbingresos.setText("0");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 174, Short.MAX_VALUE))
                            .addComponent(jScrollPane1)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(217, 217, 217)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(203, 203, 203)
                                .addComponent(jButton2))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(txtcant, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbingresos, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 57, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(txtcant, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbingresos, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
public String getFechaFin() {
        String fecha = "";
        try {
            int dia = calendarFecha.getDate().getDate();
            int mes = calendarFecha.getDate().getMonth() + 1;
            int anio = calendarFecha.getDate().getYear() + 1900;
            fecha = anio + "-" + mes + "-" + dia;

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Debe elegir una fecha");
        }
        return fecha;

    }

    public String getFechaInicio() {
        String fecha = "";
        try {
            int dia = calendarfecha2.getDate().getDate();
            int mes = calendarfecha2.getDate().getMonth() + 1;
            int anio = calendarfecha2.getDate().getYear() + 1900;
            fecha = anio + "/" + mes + "/" + dia;

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Elegir una fecha de inicio");
        }
        return fecha;

    }

    public String getFechaInicioInter() {
        String fecha = "";
        try {
            int dia = calendarfecha1.getDate().getDate();
            int mes = calendarfecha1.getDate().getMonth() + 1;
            int anio = calendarfecha1.getDate().getYear() + 1900;
            fecha = anio + "/" + mes + "/" + dia;

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Elegir una fecha de finalización");
        }
        return fecha;

    }

    public static String fechaactual() {
        java.util.Date fecha = new java.util.Date();
        SimpleDateFormat formatofecha = new SimpleDateFormat("YYYY-MM-dd");
        return formatofecha.format(fecha);
    }

    public void sumar() {
        double sumtotal = 0;
        double cont;
        String filas;

        for (int i = 0; i < tbclientes.getRowCount(); i++) {
            filas = tbclientes.getValueAt(i, 9).toString();
            cont = Double.parseDouble(filas);

            sumtotal = sumtotal + cont;

        }
        this.lbingresos.setText("" + Math.rint(sumtotal * 100) / 100);
    }

private void btnbuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnbuscarActionPerformed
// TODO add your handling code here:

    String dni = txtdni.getText();

    if (rdfecha.isSelected() == true) {
        DefaultTableModel modelo = new DefaultTableModel();
        String[] Titulos = {"CÓDIGO", "CÉDULA", "NOMBRES", "APELLIDOS", "PLACA", "FECHA", "ENTRADA", "SALIDA", "HORAS", "TOTAL"};
        modelo.setColumnIdentifiers(Titulos);
        this.tbclientes.setModel(modelo);

        Conexion j = new Conexion();
        j.conectar();
        sql = j.sql;
        try {
            String[] registros = new String[10];
            s = sql.createStatement();
            String ConsultaSQL = "SELECT cliente_mes.cod_barras, cliente_mes.ci,cliente_mes.nombre,cliente_mes.apellido,cliente_mes.placa,entradas.fecha,entradas.hora_llegada, entradas.hora_salida, pagos.horas,pagos.tota FROM pagos, cliente_mes, entradas WHERE entradas.fecha = '" + getFechaFin() + "' AND entradas.estado ='Salida' AND entradas.ci = cliente_mes.ci AND pagos.id_entrada=entradas.id";
            ResultSet rs = s.executeQuery(ConsultaSQL);

            while (rs.next()) {
                registros[0] = rs.getString("cod_barras");
                registros[1] = rs.getString("ci");
                registros[2] = rs.getString("nombre");
                registros[3] = rs.getString("apellido");
                registros[4] = rs.getString("placa");
                registros[5] = rs.getString("fecha");
                registros[6] = rs.getString("hora_llegada");
                registros[7] = rs.getString("hora_salida");
                registros[8] = rs.getString("horas");
                registros[9] = rs.getString("tota");
                modelo.addRow(registros);

            }
            tbclientes.setModel(modelo);
            txtcant.setText("" + tbclientes.getRowCount());
            sumar();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Revise la fecha elegida");
            //Logger.getLogger(ConsultasRegistrosClientes.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    if (rddni.isSelected() == true) {
        DefaultTableModel modelo = new DefaultTableModel();
        String[] Titulos = {"CÓDIGO", "CÉDULA", "NOMBRES", "APELLIDOS", "PLACA", "FECHA", "ENTRADA", "SALIDA", "HORAS", "TOTAL"};
        modelo.setColumnIdentifiers(Titulos);
        this.tbclientes.setModel(modelo);

        Conexion j = new Conexion();
        j.conectar();
        sql = j.sql;
        try {
            String[] registros = new String[10];
            s = sql.createStatement();
            String ConsultaSQL = "SELECT cliente_mes.cod_barras, cliente_mes.ci,cliente_mes.nombre,cliente_mes.apellido,cliente_mes.placa,entradas.fecha,entradas.hora_llegada, entradas.hora_salida, pagos.horas,pagos.tota FROM pagos, cliente_mes, entradas WHERE cliente_mes.ci = '" + txtdni.getText() + "' AND entradas.fecha ='" + getFechaFin() + "' AND  entradas.estado ='Salida' AND entradas.ci = cliente_mes.ci AND pagos.id_entrada=entradas.id";
            ResultSet rs = s.executeQuery(ConsultaSQL);

            while (rs.next()) {
                registros[0] = rs.getString("cod_barras");
                registros[1] = rs.getString("ci");
                registros[2] = rs.getString("nombre");
                registros[3] = rs.getString("apellido");
                registros[4] = rs.getString("placa");
                registros[5] = rs.getString("fecha");
                registros[6] = rs.getString("hora_llegada");
                registros[7] = rs.getString("hora_salida");
                registros[8] = rs.getString("horas");
                registros[9] = rs.getString("tota");
                modelo.addRow(registros);

            }
            tbclientes.setModel(modelo);
            txtcant.setText("" + tbclientes.getRowCount());
            sumar();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Revise los campos");
            //Logger.getLogger(ConsultasRegistrosClientes.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    if (intervalos.isSelected() == true) {
        if (txtdni.getText().equalsIgnoreCase("")) {
            DefaultTableModel modelo = new DefaultTableModel();
            String[] Titulos = {"CÓDIGO", "CÉDULA", "NOMBRES", "APELLIDOS", "PLACA", "FECHA", "ENTRADA", "SALIDA", "HORAS", "TOTAL"};
            modelo.setColumnIdentifiers(Titulos);
            this.tbclientes.setModel(modelo);

            Conexion j = new Conexion();
            j.conectar();
            sql = j.sql;
            try {
                String[] registros = new String[10];
                s = sql.createStatement();
                String ConsultaSQL = "SELECT cliente_mes.cod_barras, cliente_mes.ci,cliente_mes.nombre,cliente_mes.apellido,cliente_mes.placa,entradas.fecha,entradas.hora_llegada, entradas.hora_salida, pagos.horas,pagos.tota FROM pagos, cliente_mes, entradas WHERE entradas.fecha BETWEEN '" + getFechaInicio() + "' AND '" + getFechaInicioInter() + "' AND entradas.estado ='Salida' AND entradas.ci = cliente_mes.ci AND pagos.id_entrada=entradas.id";
                ResultSet rs = s.executeQuery(ConsultaSQL);

                while (rs.next()) {
                    registros[0] = rs.getString("cod_barras");
                    registros[1] = rs.getString("ci");
                    registros[2] = rs.getString("nombre");
                    registros[3] = rs.getString("apellido");
                    registros[4] = rs.getString("placa");
                    registros[5] = rs.getString("fecha");
                    registros[6] = rs.getString("hora_llegada");
                    registros[7] = rs.getString("hora_salida");
                    registros[8] = rs.getString("horas");
                    registros[9] = rs.getString("tota");
                    modelo.addRow(registros);

                }
                tbclientes.setModel(modelo);
                txtcant.setText("" + tbclientes.getRowCount());
                sumar();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Revise los campos");
                //Logger.getLogger(ConsultasRegistrosClientes.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            DefaultTableModel modelo = new DefaultTableModel();
            String[] Titulos = {"CÓDIGO", "CÉDULA", "NOMBRES", "APELLIDOS", "PLACA", "FECHA", "ENTRADA", "SALIDA", "HORAS", "TOTAL"};
            modelo.setColumnIdentifiers(Titulos);
            this.tbclientes.setModel(modelo);

            Conexion j = new Conexion();
            j.conectar();
            sql = j.sql;
            try {
                String[] registros = new String[10];
                s = sql.createStatement();
                String ConsultaSQL = "SELECT cliente_mes.cod_barras, cliente_mes.ci,cliente_mes.nombre,cliente_mes.apellido,cliente_mes.placa,entradas.fecha,entradas.hora_llegada, entradas.hora_salida, pagos.horas,pagos.tota FROM pagos, cliente_mes, entradas WHERE entradas.fecha BETWEEN '" + getFechaInicio() + "' AND '" + getFechaInicioInter() + "' AND cliente_mes.ci = '" + txtdni.getText() + "' AND entradas.estado ='Salida' AND entradas.ci = cliente_mes.ci AND pagos.id_entrada=entradas.id";
                ResultSet rs = s.executeQuery(ConsultaSQL);

                while (rs.next()) {
                    registros[0] = rs.getString("cod_barras");
                    registros[1] = rs.getString("ci");
                    registros[2] = rs.getString("nombre");
                    registros[3] = rs.getString("apellido");
                    registros[4] = rs.getString("placa");
                    registros[5] = rs.getString("fecha");
                    registros[6] = rs.getString("hora_llegada");
                    registros[7] = rs.getString("hora_salida");
                    registros[8] = rs.getString("horas");
                    registros[9] = rs.getString("tota");
                    modelo.addRow(registros);

                }
                tbclientes.setModel(modelo);
                txtcant.setText("" + tbclientes.getRowCount());
                sumar();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Revise los campos");
                //Logger.getLogger(ConsultasRegistrosClientes.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    if (rdtodo.isSelected() == true) {
        Cargarlistaclientes();
        sumar();
    }

}//GEN-LAST:event_btnbuscarActionPerformed

private void rddniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rddniActionPerformed
// TODO add your handling code here:
    if (rddni.isSelected() == true) {
        calendarFecha.setEnabled(true);
        calendarfecha1.setEnabled(false);
        calendarfecha2.setEnabled(false);
        txtdni.setEnabled(true);
        txtdni.requestFocus();
    }
}//GEN-LAST:event_rddniActionPerformed

private void rdtodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdtodoActionPerformed
// TODO add your handling code here:
    Cargarlistaclientes();
    txtdni.setText("");
    txtdni.setEnabled(false);
    calendarFecha.setEnabled(false);
    calendarfecha1.setEnabled(false);
    calendarfecha2.setEnabled(false);
}//GEN-LAST:event_rdtodoActionPerformed

private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

    hc = new Conexion();

    try {
        // TODO add your handling code here:
        List<ReporteIngresosClientes> listaclientes = new ArrayList<ReporteIngresosClientes>();
        int filas = tbclientes.getRowCount();
        //String cod_barras, String ci, String nombre, String apellido, String direccion, String placa, String modelo, String color
        for (int i = 0; i < filas; i++) {
            ReporteIngresosClientes p = new ReporteIngresosClientes(
                    tbclientes.getValueAt(i, 0).toString(),
                    tbclientes.getValueAt(i, 1).toString(),
                    tbclientes.getValueAt(i, 2).toString()+" "+tbclientes.getValueAt(i, 3).toString(),
                    tbclientes.getValueAt(i, 4).toString(),
                    tbclientes.getValueAt(i, 5).toString(),
                    tbclientes.getValueAt(i, 6).toString(),
                    tbclientes.getValueAt(i, 7).toString(),
                    tbclientes.getValueAt(i, 8).toString(),
                    tbclientes.getValueAt(i, 9).toString()
            );
            listaclientes.add(p);
        }

        JasperReport reporte = (JasperReport) JRLoader.loadObject("ReporteIngresosClientes.jasper");
        Map<String, String> parametros = new HashMap<String, String>();
            parametros.put("total", lbingresos.getText());

        JasperPrint jasperPrint = JasperFillManager.fillReport(reporte, parametros, new JRBeanCollectionDataSource(listaclientes));
        JasperViewer.viewReport(jasperPrint, false);
        JRExporter exporter = new JRPdfExporter();
        exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
        exporter.setParameter(JRExporterParameter.OUTPUT_FILE, new java.io.File("ReportClienteMensual.pdf"));
        exporter.exportReport();
    } catch (JRException ex) {
        Logger.getLogger(ConsultasRegistrosClientes.class.getName()).log(Level.SEVERE, null, ex);
    }


}//GEN-LAST:event_jButton2ActionPerformed

    private void txtdniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtdniActionPerformed


    }//GEN-LAST:event_txtdniActionPerformed

    private void rdfechaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdfechaActionPerformed
        // TODO add your handling code here:
        if (rdfecha.isSelected() == true) {
            calendarFecha.setEnabled(true);
            calendarfecha1.setEnabled(false);
            calendarfecha2.setEnabled(false);
            txtdni.setEnabled(false);
            txtdni.setText("");
        }
    }//GEN-LAST:event_rdfechaActionPerformed

    private void intervalosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_intervalosActionPerformed
        if (intervalos.isSelected() == true) {

            calendarfecha1.setEnabled(true);
            calendarfecha2.setEnabled(true);
            calendarFecha.setEnabled(false);
            txtdni.setEnabled(true);
            txtdni.setText("");

        }
    }//GEN-LAST:event_intervalosActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnbuscar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private com.toedter.calendar.JDateChooser calendarFecha;
    private com.toedter.calendar.JDateChooser calendarfecha1;
    private com.toedter.calendar.JDateChooser calendarfecha2;
    private javax.swing.JRadioButton intervalos;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbingresos;
    private javax.swing.JRadioButton rddni;
    private javax.swing.JRadioButton rdfecha;
    private javax.swing.JRadioButton rdtodo;
    private javax.swing.JTable tbclientes;
    private javax.swing.JTextField txtcant;
    private javax.swing.JTextField txtdni;
    // End of variables declaration//GEN-END:variables

}
