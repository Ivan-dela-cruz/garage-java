/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

 /*
 * Boleta.java
 *
 * Created on 16-abr-2013, 10:39:15
 */
package view;

import ModelClass.TextFieldEven;
import conexion.Conexion;
import java.awt.Color;
import java.sql.*;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.TimerTask;
import java.util.logging.*;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Administrador
 */
public class Estacionamiento extends javax.swing.JInternalFrame {

    /**
     * Creates new form Boleta
     */
    java.util.Timer timer = null;
    TimerTask task;
    int i = 32;

    private double precios = 0;

    private int totales = 0;
    private int cmensual = 0;
    private int choras = 0;
    private int actual_cli = 0;
    private int actual_hora = 0;

    TextFieldEven evento = new TextFieldEven();

    public Estacionamiento() {
        initComponents();
        this.setLocation(15, 15);
        listar();
//        disponibles();

    }
    public static Connection sql;
    public static Statement s;

    public void listar() {

        String registro[] = new String[4];
        Conexion j = new Conexion();
        j.conectar();
        sql = j.sql;
        try {
            s = sql.createStatement();
            ResultSet rs = s.executeQuery("select * from estacionamientos");
            while (rs.next()) {
                registro[0] = rs.getString("est_total");
                registro[1] = rs.getString("est_clientes");
                registro[2] = rs.getString("est_horas");
                registro[3] = rs.getString("est_precio");
            }
            total.setText(registro[0]);
            mensuales.setText(registro[1]);
            horas.setText(registro[2]);
            precio.setText(registro[3]);

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "No hay registros");

        }
    }

//    public void disponibles() {
//
//        Conexion j = new Conexion();
//        j.conectar();
//        sql = j.sql;
//        try {
//            s = sql.createStatement();
//            ResultSet rs = s.executeQuery("select * from disponibles");
//            while (rs.next()) {
//                actual_cli = Integer.parseInt(rs.getString("libre_clientes"));
//                actual_hora = Integer.parseInt(rs.getString("libre_horas"));
//                
//            }
////            total.setText(registro[0]);
////            mensuales.setText(registro[1]);
//           
//        } catch (SQLException ex) {
//            JOptionPane.showMessageDialog(null, "No hay registros");
//
//        }
//    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    public static String fechaact() {
        Date fecha = new Date();
        SimpleDateFormat formatofecha = new SimpleDateFormat("dd/MM/YYYY");
        return formatofecha.format(fecha);

    }
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        total = new javax.swing.JTextField();
        lbtotal = new javax.swing.JLabel();
        mensuales = new javax.swing.JTextField();
        lbmensual = new javax.swing.JLabel();
        horas = new javax.swing.JTextField();
        lbhoras = new javax.swing.JLabel();
        precio = new javax.swing.JTextField();
        lbprecio = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Estacionamiento");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        total.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        total.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                totalKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                totalKeyTyped(evt);
            }
        });

        lbtotal.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        lbtotal.setForeground(new java.awt.Color(102, 102, 102));
        lbtotal.setText("Total estacionamientos");

        mensuales.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mensuales.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                mensualesKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                mensualesKeyTyped(evt);
            }
        });

        lbmensual.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        lbmensual.setForeground(new java.awt.Color(102, 102, 102));
        lbmensual.setText("Disponibilidad clientes mensuales");

        horas.setEditable(false);
        horas.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        horas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                horasActionPerformed(evt);
            }
        });
        horas.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                horasKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                horasKeyTyped(evt);
            }
        });

        lbhoras.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        lbhoras.setForeground(new java.awt.Color(102, 102, 102));
        lbhoras.setText("Disponibilidad clientes horas");

        precio.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        precio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                precioActionPerformed(evt);
            }
        });
        precio.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                precioKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                precioKeyTyped(evt);
            }
        });

        lbprecio.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        lbprecio.setForeground(new java.awt.Color(102, 102, 102));
        lbprecio.setText("Precio Hora");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(total)
                        .addComponent(mensuales)
                        .addComponent(lbmensual, javax.swing.GroupLayout.DEFAULT_SIZE, 228, Short.MAX_VALUE)
                        .addComponent(lbtotal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(horas)
                        .addComponent(lbhoras, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(precio, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbprecio, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbtotal)
                .addGap(6, 6, 6)
                .addComponent(total, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbmensual)
                .addGap(6, 6, 6)
                .addComponent(mensuales, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbhoras)
                .addGap(6, 6, 6)
                .addComponent(horas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbprecio)
                .addGap(6, 6, 6)
                .addComponent(precio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jButton1.setText("Actualizar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Limpiar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(41, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void totalKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_totalKeyReleased
        if (total.getText().equals("")) {
            lbtotal.setForeground(new Color(102, 102, 102));
        } else {
            lbtotal.setText("Total estacionamientos");
            lbtotal.setForeground(new Color(0, 153, 51));
        }
    }//GEN-LAST:event_totalKeyReleased

    private void totalKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_totalKeyTyped
        evento.numberkeyPress(evt);
    }//GEN-LAST:event_totalKeyTyped

    private void mensualesKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_mensualesKeyReleased
        if (total.getText().equals("")) {
            lbmensual.setForeground(new Color(102, 102, 102));
        } else {
            lbmensual.setText("Disponibilidad clientes mensuales");
            lbmensual.setForeground(new Color(0, 153, 51));
        }        // TODO add your handling code here:
    }//GEN-LAST:event_mensualesKeyReleased

    private void mensualesKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_mensualesKeyTyped
        evento.numberkeyPress(evt);
    }//GEN-LAST:event_mensualesKeyTyped

    private void horasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_horasActionPerformed

    }//GEN-LAST:event_horasActionPerformed

    private void horasKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_horasKeyReleased
        if (horas.getText().equals("")) {
            lbhoras.setForeground(new Color(102, 102, 102));
        } else {
            lbhoras.setText("Disponibilidad clientes horas");
            lbhoras.setForeground(new Color(0, 153, 51));
        }
    }//GEN-LAST:event_horasKeyReleased

    private void horasKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_horasKeyTyped
        evento.numberkeyPress(evt);        // TODO add your handling code here:
    }//GEN-LAST:event_horasKeyTyped

    private void precioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_precioActionPerformed

    }//GEN-LAST:event_precioActionPerformed

    private void precioKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_precioKeyReleased
        if (precio.getText().equals("")) {
            lbprecio.setForeground(new Color(102, 102, 102));
        } else {
            lbprecio.setText("Precio hora");
            lbprecio.setForeground(new Color(0, 153, 51));
        }
    }//GEN-LAST:event_precioKeyReleased

    private void precioKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_precioKeyTyped
        evento.numberDecimalkeyPress(evt, precio);
    }//GEN-LAST:event_precioKeyTyped

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        if (validar() == 3) {
            try {
                Conexion j = new Conexion();

                j.conectar();
                j.editar("UPDATE estacionamientos SET est_id='1',est_total ='" + totales + "', est_clientes = '" + cmensual + "',est_horas = '" + choras + "',est_precio = '" + precios + "'");
//                j.conectar();
//                j.editar("UPDATE disponibles SET id='1',libre_clientes ='" + (cmensual-actual_cli) + "', libre_horas = '" + (choras-actual_hora) + "'");

                //new LOGGIN().setVisible(true);
                totales = 0;
                cmensual = 0;
                choras = 0;
                horas.setText(String.valueOf(choras));
                precios = 0;
                listar();
            } catch (Exception e) {
                System.out.println("ERROR");
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        limpiar();
    }//GEN-LAST:event_jButton2ActionPerformed

    public void limpiar() {
        total.setText("");
        mensuales.setText("");
        horas.setText("");
        precio.setText("");
    }
    int disponible = 0;

    private int validar() {

        int val = 0;
        try {

            if (total.getText().equals("")) {

                lbtotal.setText("Ingrese Total");
                lbtotal.setForeground(Color.red);
                total.requestFocus();
            } else {

                val++;

                if (mensuales.getText().equals("") || Integer.parseInt(mensuales.getText()) >= Integer.parseInt(total.getText())) {
                    lbmensual.setText("Ingrese usuarios mensuales");
                    lbmensual.setForeground(Color.red);
                    mensuales.requestFocus();
                } else {
                    val++;

                    if (precio.getText().equals("")) {
                        lbprecio.setText("Ingrese precio ");
                        lbprecio.setForeground(Color.red);
                        precio.requestFocus();
                    } else {
                        val++;
                        totales = Integer.parseInt(total.getText());
                        cmensual = Integer.parseInt(mensuales.getText());
                        //choras = Integer.parseInt(total.getText());
                        choras = totales - cmensual;
                        horas.setText(String.valueOf(choras));

                        precios = Double.parseDouble(precio.getText());

//            
                    }

                }
            }

            return val;
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Revise los campos");
            return val;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField horas;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lbhoras;
    private javax.swing.JLabel lbmensual;
    private javax.swing.JLabel lbprecio;
    private javax.swing.JLabel lbtotal;
    private javax.swing.JTextField mensuales;
    private javax.swing.JTextField precio;
    private javax.swing.JTextField total;
    // End of variables declaration//GEN-END:variables

}
